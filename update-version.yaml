# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/instance: knot-tekton-tasks
  name: update-version
  namespace: tekton-pipelines
spec:
  params:
  - name: productOrganization
    type: string
    description: Name of the product organization
    default: ""  
  - name: productArea
    type: string
    description: Name of the product Area
    default: ""  
  - name: productID
    type: string
    description: ID of the product 
    default: ""    
  - description: The path to the yaml file to deploy within the git source
    name: repoName
    type: string
  - default: latest
    description: Image tag
    name: imageTag
    type: string
  - name: environment
    type: string
    description: Environment of deployment   
  - name: namespace
    type: string
    description: Namespace of deployment
  - name: task-name
    description: The task name.
    type: string
    default: "task-name"
  - name: PIPELINE_NAME
    description: The pipeline name.
  - name: EXECUTION_NAME
    description: The execution name.
  volumes:
  - name: github-secret
    secret:
      secretName: basic-user-pass
  steps:
    - name: create-state
      image: curlimages/curl:latest
      script: |
        formatted_date=$(date "+%Y-%m-%d %H:%M:%S")
        if [[ "$(params.task-name)|" != "task-name" ]]; then
        curl -X POST -H "Content-Type: application/json" -d '[
          {
            "key": "$(params.repoName)|$(params.PIPELINE_NAME)|$(params.EXECUTION_NAME)|$(params.task-name)",
            "value": {
              "pipelineName": "$(params.PIPELINE_NAME)",
              "status": "running",
              "executioName": "$(params.EXECUTION_NAME)",
              "stepName": "$(params.task-name)",
              "start_time": "'"$formatted_date"'",
              "end_time": null
            }
          }
        ]' http://localhost:3500/v1.0/state/cosmosdbcomponent
        fi
    - name: update-yaml
      image: alpine
      resources: {}
      volumeMounts:
      - mountPath: /var/secret
        name: github-secret
      env:
        - name: REPO_NAME
          value: $(params.repoName)
        - name: IMAGE_TAG
          value: $(params.imageTag)
        - name: PROD_ORG
          value: $(params.productOrganization)
        - name: PROD_AREA
          value: $(params.productArea)
        - name: PROD_ID
          value: $(params.productID)
        - name: ENVIRONMENT
          value: $(params.environment)
        - name: NAMESPACE
          value: $(params.namespace) 
      script: |
        #!/bin/sh
        apk update
        apk add jq
        apk add curl
        apk add yq
        
      
        echo "${ENVIRONMENT}"
        echo "${NAMESPACE}"
        echo ${REPO_NAME}
        echo ${IMAGE_TAG}
        echo ${PROD_ORG}
        echo ${PROD_AREA}
        echo ${PROD_ID}
        
        echo "curl https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/deployment/${ENVIRONMENT}/values.yaml"
        curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/deployment/development/values.yaml | jq -r '.content' | base64 -d > values.yaml
    
        cat values.yaml
        export sha="$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/deployment/${ENVIRONMENT}/values.yaml | jq -r '.sha')"
        export tag="$(grep tag: values.yaml | awk '{print $2}' | uniq | sed -e 's/%//')"
        export envPath="$(grep envPath: values.yaml | awk '{print $2}' | uniq | sed -e 's/%//')"
        export nameSpace="$(grep nameSpace: values.yaml | awk '{print $2}' | uniq | sed -e 's/%//')"
      
        sed -i -e "s;tag: $tag;tag: ${IMAGE_TAG};g" values.yaml
        sed -i -e "s;envPath: $envPath;envPath: ${ENVIRONMENT};g" values.yaml
        sed -i -e "s;nameSpace: $nameSpace;nameSpace: ${NAMESPACE};g" values.yaml

        cat values.yaml
        export content="$(cat values.yaml | base64 -w0)"
        echo "$content"
        curl -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/deployment/${ENVIRONMENT}/values.yaml -d '{"message":"update version","committer":{"name":"github-actions[bot]","email":"41898282+github-actions[bot]@users.noreply.github.com"},"content":"'"$content"'","sha":"'"$sha"'"}' -v

        echo  "https://raw.githubusercontent.com/NTTData-HybridCloud/knot-onboarding-resources/master/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/values.yaml"                                                                                                                                                                                                                             
        # Download the values.yaml file from GitHub
        curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 https://raw.githubusercontent.com/NTTData-HybridCloud/knot-onboarding-resources/master/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/values.yaml > values.yaml

        cat values.yaml 

        # Parse and update the YAML file
        yq eval '(.environments[] | select(.envPath == env(ENVIRONMENT) and .nameSpace == env(NAMESPACE))).version = env(IMAGE_TAG)' values.yaml -i
        yq eval '(.environments[] | select(.envPath == env(ENVIRONMENT) and .nameSpace == env(NAMESPACE))).enabled = true' values.yaml -i

        
        cat values.yaml 

        # Encode the updated YAML content in base64
        export content="$(cat values.yaml | base64 -w0)"
        
        # Get the SHA of the values.yaml file on GitHub
        export sha="$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/values.yaml | jq -r '.sha')"

        # Update the values.yaml file on GitHub
        curl -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer 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 https://api.github.com/repos/NTTData-HybridCloud/knot-onboarding-resources/contents/products/${PROD_ORG}/${PROD_AREA}/${PROD_ID}/${REPO_NAME}/values.yaml -d '{"message":"Update version","committer":{"name":"github-actions[bot]","email":"41898282+github-actions[bot]@users.noreply.github.com"},"content":"'"$content"'","sha":"'"$sha"'"}' -v
    - name: update-state
      image: curlimages/curl:latest
      script: |
        formatted_date=$(date "+%Y-%m-%d %H:%M:%S")
        if [[ "$(params.task-name)|" != "task-name" ]]; then
          curl -X GET "http://localhost:3500/v1.0/state/cosmosdbcomponent/$(params.repoName)|$(params.PIPELINE_NAME)|$(params.EXECUTION_NAME)|$(params.task-name)" -o previouscomponent.txt
          cat previouscomponent.txt
          start_time=$(cat previouscomponent.txt | grep -o '"start_time":"[^"]*' | sed 's/"start_time":"//')
          curl -X POST -H "Content-Type: application/json" -d '[
            {
              "key": "$(params.repoName)|$(params.PIPELINE_NAME)|$(params.EXECUTION_NAME)|$(params.task-name)",
              "value": {
                "pipelineName": "$(params.PIPELINE_NAME)",
                "status": "completed",
                "executioName": "$(params.EXECUTION_NAME)",
                "stepName": "$(params.task-name)",
                "start_time": "'"$start_time"'",
                "end_time": "'"$formatted_date"'"
              }
            }
          ]' http://localhost:3500/v1.0/state/cosmosdbcomponent
        fi